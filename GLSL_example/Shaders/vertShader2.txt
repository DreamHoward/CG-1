#version 330 core
layout (location = 0) in vec3 position; 
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texcoord;

uniform mat4 modelview;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 lightPos; 
uniform vec3 viewPos;


flat out vec3 LightingColor;
flat out vec3 specular;
out vec2 Texcoord;


void main()
{
	Texcoord = texcoord;
    gl_Position = projection * modelview * vec4(position, 1.0f);

	//gouround
	vec3 Normal = mat3(modelview) * normal; 
	mat4 v =(inverse(view)) * modelview;
    vec3 FragPos = vec3(v * vec4(position,1.0));

	// ambient
    vec3 ambient = vec3(0.2,0.2,0.2);
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff*vec3(0.5,0.5,0.5);
    
    // specular
    vec3 specularStrength = vec3(0.8,0.8,0.8);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 3.6);
    specular = specularStrength * spec ;        

    LightingColor = ambient + diffuse;

    
    

}