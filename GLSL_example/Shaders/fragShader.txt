#version 330 core
out vec4 color;

in vec3 FragPos;  
in vec3 Normal;  
in vec2 Texcoord;
  
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform sampler2D MyTexture_1;

void main()
{
	vec4 texcolor = texture(MyTexture_1,Texcoord);
	
    // Ambient

    vec3 ambient = vec3(0.2,0.2,0.2);
  	
    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff*vec3(0.5,0.5,0.5);
    
    // Specular
    vec3 specularStrength = vec3(0.8,0.8,0.8);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 3.6);
    vec3 specular = specularStrength * spec ;  
        
    vec4 result = vec4((ambient + diffuse ),1);
    color = result* texcolor+ vec4(specular,1);
} 